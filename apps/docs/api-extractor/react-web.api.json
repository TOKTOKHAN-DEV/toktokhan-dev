{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.47.7",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@toktokhan-dev/react-web!",
  "docComment": "/**\n * React Web 환경에서 전역적으로 사용할 수 있는 유틸리티 라이브러리입니다.\n *\n * @packageDocumentation\n */\n",
  "name": "@toktokhan-dev/react-web",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@toktokhan-dev/react-web!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!Apple:class",
          "docComment": "/**\n  *\n * Apple OAuth 인증을 처리하는 클래스입니다. SocialOauthInit 클래스를 상속받아 구현되었습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class Apple extends "
            },
            {
              "kind": "Reference",
              "text": "SocialOauthInit",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Apple",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!Apple:constructor(1)",
              "docComment": "/**\n * Apple 클래스의 생성자입니다.\n *\n * @param clientID - Apple OAuth 클라이언트 ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(clientID?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientID",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Apple#createOauthUrl:member",
              "docComment": "/**\n * OAuth 인증 URL을 생성합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n *\n * @returns 생성된 OAuth 인증 URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createOauthUrl: "
                },
                {
                  "kind": "Content",
                  "text": "<State>({\n    scope,\n    state,\n    ...params\n  }: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AppleAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createOauthUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Apple#loginToLink:member",
              "docComment": "/**\n * 로그인을 위한 OAuth 인증 링크로 리다이렉트합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToLink: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AppleAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Apple#loginToPopup:member",
              "docComment": "/**\n * 로그인을 위한 OAuth 인증 팝업을 엽니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToPopup: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AppleAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToPopup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Apple#oAuthBaseUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oAuthBaseUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oAuthBaseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams:interface",
          "docComment": "/**\n * {@link https://developer.apple.com/documentation/sign_in_with_apple/request_an_authorization_to_the_sign_in_with_apple_server | `Apple Login Docs`}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface AppleAuthQueryParams "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "AppleAuthQueryParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams#client_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "client_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "client_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams#nonce:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nonce?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nonce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams#redirect_uri:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redirect_uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redirect_uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams#response_mode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response_mode?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "response_mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams#response_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response_type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams#scope:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scope?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!AppleAuthQueryParams#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!AppleButton:function(1)",
          "docComment": "/**\n  *\n * 애플 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#FullButton | `FullButton`} 컴포넌트를 기반으로 하여, 애플 아이콘과 스타일, 레이블을 포함합니다.\n *\n * @param props - FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 애플 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AppleButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "AppleButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!AppleButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "AppleButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!AppleButtonProps:interface",
          "docComment": "/**\n * FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface AppleButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FullButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "AppleButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!AppleIconButton:function(1)",
          "docComment": "/**\n  *\n * 애플 아이콘 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#IconButton | `IconButton`} 컴포넌트를 기반으로 하며, 애플 아이콘 및 버튼 스타일링이 가능합니다.\n *\n * @param props - IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 애플 아이콘 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AppleIconButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "AppleIconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!AppleIconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "AppleIconButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!AppleIconButtonProps:interface",
          "docComment": "/**\n * IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface AppleIconButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "AppleIconButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!CommonOauthParams:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface CommonOauthParams "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "CommonOauthParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!CommonOauthParams#client_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "client_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "client_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!CommonOauthParams#response_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response_type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!CommonOauthParams#scope:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scope?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!CommonOauthParams#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-web!CookieOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type CookieOptions = "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Cookies",
              "canonicalReference": "universal-cookie!default:class"
            },
            {
              "kind": "Content",
              "text": "['set']>[2]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "CookieOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "parameters": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@toktokhan-dev/react-web!ERROR_MESSAGES:var",
          "docComment": "/**\n  *\n * OAuth 팝업에서 전달된 메시지를 수신하는 React Hook입니다. 이 Hook은 OAuth 인증 후 팝업에서 전달된 메시지를 수신하여 처리합니다.\n *\n * @returns isLoading - OAuth 콜백 처리 상태를 나타냅니다. 처리 중이면 `true`, 아니면 `false`입니다.\n *\n * @example\n * ```tsx\n * // pages/login.tsx (parents window)\n *\n * const kakao = new Kakao(ENV.CLIENT_ID)\n * const Login = () => {\n *   const { data } = useOauthPopupListener()\n *   console.log(data, data.state.returnUrl, data.extra) // { code: '...', state: { returnUrl: '/my', type: 'kakao' }, extra: 'hello parents' }\n *\n *      <KakaoButton\n *        onClick={() =>\n *          kakao.loginToPopup({\n *            redirect_uri: `${window.origin}/social/callback`,\n *            state: {\n *              returnUrl: '/my',\n *              type: 'kakao',\n *            },\n *          })\n *        }\n *      />\n * }\n *\n * // pages/social/callback.tsx (popup window)\n *\n * const { data, isLoading } = useOauthPopupCallback<{type: string; returnUrl:string}>({\n *    onSuccess: (response) => {\n *      console.log(response.state.returnUrl)\n *      response.closePopup({ extra: 'hello parents' })\n *    },\n * })\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ERROR_MESSAGES: "
            },
            {
              "kind": "Content",
              "text": "{\n  NO_RESPONSE: string;\n  ORIGIN_MISMATCH: string;\n  NO_AUTH_CODE: string;\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ERROR_MESSAGES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!ExtraState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ExtraState<T> "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ExtraState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!ExtraState#extra:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extra: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "extra",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!Facebook:class",
          "docComment": "/**\n  *\n * Facebook OAuth 인증을 처리하는 클래스입니다. SocialOauthInit 클래스를 상속받아 구현되었습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class Facebook extends "
            },
            {
              "kind": "Reference",
              "text": "SocialOauthInit",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Facebook",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!Facebook:constructor(1)",
              "docComment": "/**\n * Facebook 클래스의 생성자입니다.\n *\n * @param clientID - Facebook OAuth 클라이언트 ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(clientID?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientID",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Facebook#createOauthUrl:member",
              "docComment": "/**\n * OAuth 인증 URL을 생성합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n *\n * @returns 생성된 OAuth 인증 URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createOauthUrl: "
                },
                {
                  "kind": "Content",
                  "text": "<State>({\n    scope,\n    state,\n    ...params\n  }: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FacebookAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createOauthUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Facebook#loginToLink:member",
              "docComment": "/**\n * 로그인을 위한 OAuth 인증 링크로 리다이렉트합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToLink: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FacebookAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Facebook#loginToPopup:member",
              "docComment": "/**\n * 로그인을 위한 OAuth 인증 팝업을 엽니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.return_url - 인증 후 리다이렉션될 URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToPopup: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FacebookAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToPopup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Facebook#oAuthBaseUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oAuthBaseUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oAuthBaseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams:interface",
          "docComment": "/**\n * {@link https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/ | `Facebook Login Docs`}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface FacebookAuthQueryParams "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "FacebookAuthQueryParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams#client_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "client_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "client_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams#redirect_uri:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redirect_uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redirect_uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams#response_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response_type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams#scope:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scope?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FacebookAuthQueryParams#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!FacebookButton:function(1)",
          "docComment": "/**\n  *\n * 페이스북 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#FullButton | `FullButton`} 컴포넌트를 기반으로 하여, 페이스북 아이콘과 스타일, 레이블을 포함합니다.\n *\n * @param props - FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 페이스북 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FacebookButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "FacebookButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!FacebookButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "FacebookButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!FacebookButtonProps:interface",
          "docComment": "/**\n * FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface FacebookButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FullButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "FacebookButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!FacebookIconButton:function(1)",
          "docComment": "/**\n  *\n * 페이스북 아이콘 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#IconButton | `IconButton`} 컴포넌트를 기반으로 하며, 페이스북 아이콘 및 버튼 스타일링이 가능합니다.\n *\n * @param props - IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 페이스북 아이콘 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FacebookIconButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "FacebookIconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!FacebookIconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "FacebookIconButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!FacebookIconButtonProps:interface",
          "docComment": "/**\n * IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface FacebookIconButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "FacebookIconButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps:interface",
          "docComment": "/**\n * `FullButtonProps`는 `FullButton` 컴포넌트가 받는 속성들을 정의합니다. HTMLAnchorElement의 속성을 상속하며, 추가적으로 아래의 속성들을 가집니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface FullButtonProps "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "FullButtonProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#align:member",
              "docComment": "/**\n * 버튼 내 콘텐츠의 정렬을 지정합니다. 'left' 또는 'center' 중 하나를 선택할 수 있습니다.  @default 'center'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "align?: "
                },
                {
                  "kind": "Content",
                  "text": "'left' | 'center'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "align",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#colorMode:member",
              "docComment": "/**\n * 버튼의 색상 모드를 설정합니다. 'light' 또는 'dark' 중 하나를 선택할 수 있습니다.  @default 'dark'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'light' | 'dark'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "colorMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#icon:member",
              "docComment": "/**\n * 버튼에 표시될 아이콘을 설정합니다. ReactElement 타입이어야 합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#iconStyle:member",
              "docComment": "/**\n * 아이콘의 스타일을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLOrSVGElement",
                  "canonicalReference": "!HTMLOrSVGElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['style']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "iconStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#label:member",
              "docComment": "/**\n * 버튼에 표시될 레이블을 설정합니다. null 값을 통해 레이블을 숨길 수 있습니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#labelStyle:member",
              "docComment": "/**\n * 레이블의 스타일을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLLabelElement",
                  "canonicalReference": "!HTMLLabelElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['style']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "labelStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#lang:member",
              "docComment": "/**\n * 버튼의 언어를 설정합니다. 'en' 또는 'ko' 중 하나를 선택할 수 있습니다.  @default 'ko'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lang?: "
                },
                {
                  "kind": "Content",
                  "text": "'en' | 'ko'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lang",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#onClick:member",
              "docComment": "/**\n * onClick 속성을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAnchorElement",
                  "canonicalReference": "!HTMLAnchorElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['onClick']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#socialType:member",
              "docComment": "/**\n * 소셜 타입을 지정합니다. 이를 통해 버튼의 스타일과 레이블이 결정됩니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "socialType: "
                },
                {
                  "kind": "Reference",
                  "text": "SocialType",
                  "canonicalReference": "@toktokhan-dev/react-web!SocialType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "socialType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#style:member",
              "docComment": "/**\n * anchor 태그의 스타일을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAnchorElement",
                  "canonicalReference": "!HTMLAnchorElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['style']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps#variant:member",
              "docComment": "/**\n * 버튼의 모양을 결정합니다. 'rounded', 'square' 중 하나를 선택할 수 있습니다.  @default 'square'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "variant?: "
                },
                {
                  "kind": "Content",
                  "text": "'rounded' | 'square'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "variant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@toktokhan-dev/react-web!GOOGLE_AUTH_SCOPE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GOOGLE_AUTH_SCOPE: "
            },
            {
              "kind": "Content",
              "text": "{\n  readonly email: \"https://www.googleapis.com/auth/userinfo.email\";\n  readonly profile: \"https://www.googleapis.com/auth/userinfo.profile\";\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "GOOGLE_AUTH_SCOPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!Google:class",
          "docComment": "/**\n  *\n * Google OAuth 인증을 처리하는 클래스입니다. SocialOauthInit 클래스를 상속받아 구현되었습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class Google extends "
            },
            {
              "kind": "Reference",
              "text": "SocialOauthInit",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Google",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!Google:constructor(1)",
              "docComment": "/**\n * Google 클래스의 생성자입니다.\n *\n * @param clientID - Google OAuth 클라이언트 ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(clientID?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientID",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Google#createOauthUrl:member",
              "docComment": "/**\n * OAuth 인증 URL을 생성합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @returns 생성된 OAuth 인증 URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createOauthUrl: "
                },
                {
                  "kind": "Content",
                  "text": "<State>({\n    state,\n    scope,\n    ...params\n  }: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GoogleAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createOauthUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Google#loginToLink:member",
              "docComment": "/**\n * OAuth 인증 링크로 리다이렉트합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToLink: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GoogleAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Google#loginToPopup:member",
              "docComment": "/**\n * OAuth 인증 팝업을 엽니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n *\n * @param  - params.scope - 요청할 OAuth 스코프 (이메일, 프로필 등)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToPopup: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GoogleAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToPopup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Google#oAuthBaseUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oAuthBaseUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oAuthBaseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams:interface",
          "docComment": "/**\n * {@link https://developers.google.com/identity/protocols/oauth2/javascript-implicit-flow?hl=ko | `Google Login Docs`}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface GoogleAuthQueryParams "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "GoogleAuthQueryParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#client_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "client_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "client_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#enable_granular_consent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enable_granular_consent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enable_granular_consent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#include_granted_scopes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "include_granted_scopes?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "include_granted_scopes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#login_hint:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "login_hint?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "login_hint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#prompt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prompt?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'consent' | 'select_account'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prompt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#redirect_uri:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redirect_uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redirect_uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#response_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response_type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#scope:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scope: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleAuthQueryParams#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!GoogleButton:function(1)",
          "docComment": "/**\n  *\n * 구글 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#FullButton | `FullButton`} 컴포넌트를 기반으로 하여, 구글 아이콘과 스타일, 레이블을 포함합니다.\n *\n * @param props - FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 구글 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GoogleButton: ({\n  style,\n  ...props\n}: "
            },
            {
              "kind": "Reference",
              "text": "GoogleButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  style,  ...props}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "GoogleButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!GoogleButtonProps:interface",
          "docComment": "/**\n * FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface GoogleButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FullButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "GoogleButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!GoogleIconButton:function(1)",
          "docComment": "/**\n  *\n * 구글 아이콘 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#IconButton | `IconButton`} 컴포넌트를 기반으로 하며, 구글 아이콘 및 버튼 스타일링이 가능합니다.\n *\n * @param props - IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 구글 아이콘 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GoogleIconButton: ({\n  style,\n  iconStyle,\n  ...props\n}: "
            },
            {
              "kind": "Reference",
              "text": "GoogleIconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!GoogleIconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  style,  iconStyle,  ...props}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "GoogleIconButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!GoogleIconButtonProps:interface",
          "docComment": "/**\n * IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface GoogleIconButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "GoogleIconButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps:interface",
          "docComment": "/**\n * `IconButtonProps`는 `IconButton` 컴포넌트가 받는 속성들을 정의합니다. HTMLAnchorElement의 속성을 상속하며, 추가적으로 아래의 속성들을 가집니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface IconButtonProps "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "IconButtonProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#colorMode:member",
              "docComment": "/**\n * 아이콘 버튼의 색상 모드를 설정합니다. 'light' 또는 'dark' 중 하나를 선택할 수 있습니다.  @default 'dark'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorMode?: "
                },
                {
                  "kind": "Content",
                  "text": "'light' | 'dark'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "colorMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#icon:member",
              "docComment": "/**\n * 버튼에 표시될 아이콘을 설정합니다. ReactElement 타입이어야 합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#iconStyle:member",
              "docComment": "/**\n * 아이콘의 스타일을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLOrSVGElement",
                  "canonicalReference": "!HTMLOrSVGElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['style']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "iconStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#label:member",
              "docComment": "/**\n * 버튼에 표시될 레이블을 설정합니다. null 값을 통해 레이블을 숨길 수 있습니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#labelStyle:member",
              "docComment": "/**\n * 레이블의 스타일을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLLabelElement",
                  "canonicalReference": "!HTMLLabelElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['style']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "labelStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#lang:member",
              "docComment": "/**\n * 버튼의 언어를 설정합니다. 'en' 또는 'ko' 중 하나를 선택할 수 있습니다.  @default 'ko'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lang?: "
                },
                {
                  "kind": "Content",
                  "text": "'en' | 'ko'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lang",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#onClick:member",
              "docComment": "/**\n * onClick 속성을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAnchorElement",
                  "canonicalReference": "!HTMLAnchorElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['onClick']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#socialType:member",
              "docComment": "/**\n * 소셜 타입을 지정합니다. 이를 통해 버튼의 스타일과 레이블이 결정됩니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "socialType: "
                },
                {
                  "kind": "Reference",
                  "text": "SocialType",
                  "canonicalReference": "@toktokhan-dev/react-web!SocialType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "socialType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#style:member",
              "docComment": "/**\n * anchor 태그의 스타일을 설정합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAttributes",
                  "canonicalReference": "@types/react!React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLAnchorElement",
                  "canonicalReference": "!HTMLAnchorElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">['style']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps#variant:member",
              "docComment": "/**\n * 아이콘 버튼의 모양을 결정합니다. 'full', 'rounded', 'square' 중 하나를 선택할 수 있습니다.  @default 'full'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "variant?: "
                },
                {
                  "kind": "Content",
                  "text": "'full' | 'rounded' | 'square'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "variant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!Kakao:class",
          "docComment": "/**\n  *\n * Kakao OAuth 인증을 처리하는 클래스입니다. SocialOauthInit 클래스를 상속받아 구현되었습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class Kakao extends "
            },
            {
              "kind": "Reference",
              "text": "SocialOauthInit",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Kakao",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!Kakao:constructor(1)",
              "docComment": "/**\n * Kakao 클래스의 생성자입니다.\n *\n * @param clientID - Kakao OAuth 클라이언트 ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(clientID?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientID",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Kakao#createOauthUrl:member",
              "docComment": "/**\n * OAuth 인증 URL을 생성합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n *\n * @returns 생성된 OAuth 인증 URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createOauthUrl: "
                },
                {
                  "kind": "Content",
                  "text": "<State>({\n    state,\n    scope,\n    ...params\n  }: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "KakaoAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createOauthUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Kakao#loginToLink:member",
              "docComment": "/**\n * OAuth 인증 링크로 리다이렉트합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToLink: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "KakaoAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Kakao#loginToPopup:member",
              "docComment": "/**\n * OAuth 인증 팝업을 엽니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToPopup: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "KakaoAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToPopup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Kakao#oAuthBaseUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oAuthBaseUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oAuthBaseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams:interface",
          "docComment": "/**\n * {@link https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api | `Kakao Login Docs`}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface KakaoAuthQueryParams "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "KakaoAuthQueryParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#client_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "client_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "client_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#login_hint:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "login_hint?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "login_hint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#nonce:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nonce?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nonce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#prompt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prompt?: "
                },
                {
                  "kind": "Content",
                  "text": "'none' | 'login' | 'create' | 'select_account'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prompt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#redirect_uri:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redirect_uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redirect_uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#response_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response_type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#scope:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scope?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#service_terms:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "service_terms?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "service_terms",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoAuthQueryParams#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!KaKaoAuthQueryResponse:interface",
          "docComment": "/**\n * KaKaoAuthQueryResponse는 카카오 로그인 인증 응답을 정의합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface KaKaoAuthQueryResponse "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "KaKaoAuthQueryResponse",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KaKaoAuthQueryResponse#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KaKaoAuthQueryResponse#error_description:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error_description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error_description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KaKaoAuthQueryResponse#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!KaKaoAuthQueryResponse#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!KakaoButton:function(1)",
          "docComment": "/**\n  *\n * 카카오 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#FullButton | `FullButton`} 컴포넌트를 기반으로 하여, 카카오 아이콘과 스타일, 레이블을 포함합니다.\n *\n * @param props - FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 카카오 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KakaoButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "KakaoButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "KakaoButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!KakaoButtonProps:interface",
          "docComment": "/**\n * FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface KakaoButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FullButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "KakaoButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!KakaoIconButton:function(1)",
          "docComment": "/**\n  *\n * 카카오 아이콘 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#IconButton | `IconButton`} 컴포넌트를 기반으로 하며, 카카오 아이콘 및 버튼 스타일링이 가능합니다.\n *\n * @param props - IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 카카오 아이콘 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KakaoIconButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "KakaoIconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!KakaoIconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "KakaoIconButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!KakaoIconButtonProps:interface",
          "docComment": "/**\n * IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface KakaoIconButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "KakaoIconButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!LinkReturnType:interface",
          "docComment": "/**\n * `useOauthLinkCallback` 훅의 반환 타입을 정의합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface LinkReturnType<T> "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "LinkReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!LinkReturnType#data:member",
              "docComment": "/**\n * OAuth 응답 데이터를 나타냅니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthResponse",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!LinkReturnType#isLoading:member",
              "docComment": "/**\n * OAuth 콜백 처리 상태를 나타냅니다. 처리 중이면 `true`, 아니면 `false`입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLoading: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!Naver:class",
          "docComment": "/**\n  *\n * 네이버 OAuth 인증을 처리하는 클래스입니다. SocialOauthInit 클래스를 상속받아 구현되었습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class Naver extends "
            },
            {
              "kind": "Reference",
              "text": "SocialOauthInit",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Naver",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!Naver:constructor(1)",
              "docComment": "/**\n * Naver 클래스의 생성자입니다.\n *\n * @param clientID - Naver OAuth 클라이언트 ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(clientID?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientID",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Naver#createOauthUrl:member",
              "docComment": "/**\n * OAuth 인증 URL을 생성합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n *\n * @returns 생성된 OAuth 인증 URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createOauthUrl: "
                },
                {
                  "kind": "Content",
                  "text": "<State>({\n    scope,\n    state,\n    ...params\n  }: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NaverAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createOauthUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Naver#loginToLink:member",
              "docComment": "/**\n * 로그인을 위한 OAuth 인증 링크로 리다이렉트합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToLink: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NaverAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Naver#loginToPopup:member",
              "docComment": "/**\n * 로그인을 위한 OAuth 인증 팝업을 엽니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @param  - params.scope - 요청할 OAuth 스코프\n *\n * @param  - params.state - 트랜잭션 동안 유지할 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loginToPopup: "
                },
                {
                  "kind": "Content",
                  "text": "<State>(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthUserReqParams",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NaverAuthQueryParams",
                  "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ", State>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "loginToPopup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!Naver#oAuthBaseUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oAuthBaseUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oAuthBaseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams:interface",
          "docComment": "/**\n * {@link https://developers.naver.com/docs/login/api/api.md#2--api-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EB%B3%B4 | `Naver Login Docs`}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface NaverAuthQueryParams "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "NaverAuthQueryParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams#client_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "client_id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "client_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams#redirect_uri:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redirect_uri: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redirect_uri",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams#response_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response_type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams#scope:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scope?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryParams#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryResponse:interface",
          "docComment": "/**\n * NaverAuthQueryResponse는 네이버 로그인 인증 응답을 정의합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface NaverAuthQueryResponse "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "NaverAuthQueryResponse",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryResponse#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryResponse#error_description:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error_description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error_description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryResponse#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!NaverAuthQueryResponse#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!NaverButton:function(1)",
          "docComment": "/**\n  *\n * 네이버 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#FullButton | `FullButton`} 컴포넌트를 기반으로 하여, 네이버 아이콘과 스타일, 레이블을 포함합니다.\n *\n * @param props - FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 네이버 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NaverButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "NaverButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!NaverButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "NaverButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!NaverButtonProps:interface",
          "docComment": "/**\n * FullButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface NaverButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FullButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!FullButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "NaverButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!NaverIconButton:function(1)",
          "docComment": "/**\n  *\n * 네이버 아이콘 버튼 UI 컴포넌트입니다. {@link @toktokhan-dev/react-web#IconButton | `IconButton`} 컴포넌트를 기반으로 하며, 네이버 아이콘 및 버튼 스타일링이 가능합니다.\n *\n * @param props - IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n *\n * @returns 네이버 아이콘 버튼 컴포넌트를 반환합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NaverIconButton: (props: "
            },
            {
              "kind": "Reference",
              "text": "NaverIconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!NaverIconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "NaverIconButton"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!NaverIconButtonProps:interface",
          "docComment": "/**\n * IconButtonProps에서 'socialType'과 'icon'을 제외한 속성들을 상속받습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface NaverIconButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@toktokhan-dev/react-web!IconButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'socialType' | 'icon'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "NaverIconButtonProps",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface OauthResponse<T> "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "OauthResponse",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse#errorDescription:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorDescription: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "errorDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Content",
                  "text": "T | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!OauthStateReturnType:interface",
          "docComment": "/**\n * OauthStateReturnType은 OAuth 상태 반환 타입을 정의합니다. type: 소셜 로그인 타입을 나타냅니다. returnUrl: 로그인 후 리다이렉트 될 URL을 나타냅니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface OauthStateReturnType "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "OauthStateReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!OauthStateReturnType#returnUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "returnUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "returnUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!OauthStateReturnType#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-web!OauthUserReqParams:type",
          "docComment": "/**\n * OauthUserReqParams는 OAuth 인증 요청에 필요한 파라미터를 정의합니다. OauthUserReqParams는 CommonOauthParams를 확장하고, 필요한 추가 속성을 정의합니다. 소셜로그인에 필요한 `response_type` , `client_id`, `scope`, `state` 를 클래스 내부에서 직접 주입해주고 있기 때문에 필수 타입에서 제거하거나 변환하고 `return_url`와 같이 요청시 필요한 타입을 추가하였습니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type OauthUserReqParams<T extends "
            },
            {
              "kind": "Reference",
              "text": "CommonOauthParams",
              "canonicalReference": "@toktokhan-dev/react-web!CommonOauthParams:interface"
            },
            {
              "kind": "Content",
              "text": ", State> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<T, keyof "
            },
            {
              "kind": "Reference",
              "text": "CommonOauthParams",
              "canonicalReference": "@toktokhan-dev/react-web!CommonOauthParams:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n  state?: State;\n  scope?: string | string[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "OauthUserReqParams",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!PopupResponse:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PopupResponse<T> extends "
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "PopupResponse",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@toktokhan-dev/react-web!PopupResponse#closePopup:member(1)",
              "docComment": "/**\n * 팝업을 닫는 함수를 나타냅니다. 팝업이 닫힐때 부모 창에 OAuth 응답 데이터를 전달합니다. `useOauthPopupListener` 훅을 사용하여 부모 창에서 OAuth 응답 데이터를 수신할 수 있습니다.\n *\n * @param extra - 모달을 닫을때 부모 창에게 추가적인 데이터를 전달할 수 있습니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closePopup(extra?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "extra",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "closePopup"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!PopupReturnType:interface",
          "docComment": "/**\n * `useOauthPopupCallback` 훅의 반환 타입을 정의합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface PopupReturnType<T> "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "PopupReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@toktokhan-dev/react-web!PopupReturnType#closePopup:member(1)",
              "docComment": "/**\n * 팝업을 닫는 함수를 나타냅니다. 팝업이 닫힐때 부모 창에 OAuth 응답 데이터를 전달합니다. `useOauthPopupListener` 훅을 사용하여 부모 창에서 OAuth 응답 데이터를 수신할 수 있습니다.\n *\n * @param extra - 모달을 닫을때 부모 창에게 추가적인 데이터를 전달할 수 있습니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closePopup(extra?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "extra",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "closePopup"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!PopupReturnType#data:member",
              "docComment": "/**\n * OAuth 응답 데이터를 나타냅니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "OauthResponse",
                  "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!PopupReturnType#isLoading:member",
              "docComment": "/**\n * OAuth 콜백 처리 상태를 나타냅니다. 처리 중이면 `true`, 아니면 `false`입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLoading: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector:class",
          "docComment": "/**\n  *\n * 알림함수를 관리하고,{@link @toktokhan-dev/react-web#SyncedStorage | `SyncedStorage`} 와 {@link @toktokhan-dev/react-web#useSyncWebStorage | `useSyncWebStorage`} 를 연결 하는 모듈입니다.\n *\n * @remarks\n *\n * {@link @toktokhan-dev/react-web#useSyncWebStorage | `useSyncWebStorage`}로 부터 리랜더링을 촉발시키는 알림함수 를 받아 관리하고, {@link @toktokhan-dev/react-web#SyncedStorage | `SyncedStorage`} 모듈에 알림 함수를 넘겨주어 {@link @toktokhan-dev/react-web#useSyncWebStorage | `useSyncWebStorage`}와 연결시켜주는 역할을 합니다.\n *\n * @example\n * ```ts\n * const textStorage = new SyncedStorage<string>(\"text\", localStorage)\n * const textStorageConnector = new ReactSyncConnector(textStorage)\n *\n * // Some Action\n * textStorage.set(\"Hello, World!\")\n *\n * // Some component\n * const text = useSyncWebStorage(textStorageConnector) // Wrapping Hook with useSyncWebStorage\n * console.log(text) // \"Hello, World!\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ReactSyncConnector<Data> "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Data",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "ReactSyncConnector",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector:constructor(1)",
              "docComment": "/**\n * ReactSyncConnector 인스턴스를 생성합니다. Storage 모듈에 emitChange 함수를 연결합니다.\n *\n * @param synced - ReactSynced 인터페이스를 구현한 객체입니다.\n *\n * @param serverSynced - 사용자가 제공하는 서버 초기값입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(synced: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactSynced",
                  "canonicalReference": "@toktokhan-dev/react-web!ReactSynced:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data> | null"
                },
                {
                  "kind": "Content",
                  "text": ", serverSynced?: "
                },
                {
                  "kind": "Content",
                  "text": "Data"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "synced",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "serverSynced",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector#getServerSnapShot:member",
              "docComment": "/**\n * 서버 데이터의 스냅샷을 반환합니다.\n *\n * @returns 서버 초깃값 또는 null을 반환합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getServerSnapShot: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<Data> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getServerSnapShot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector#getSnapshot:member",
              "docComment": "/**\n * 알림함수가 실행되어, 리랜더링 될 시 조회할 데이터를 넘겨줍니다.\n *\n * @returns 동기화된 데이터 또는 null을 반환합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSnapshot: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<Data> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getSnapshot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector#listeners:member",
              "docComment": "/**\n * 알림함수를 저장하는 배열입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listeners: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<() => void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "listeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector#subscribe:member",
              "docComment": "/**\n * {@link https://react.dev/reference/react/useSyncExternalStore | `useSyncExternalStore`}에서 알림함수를 받고, 저장해둡니다.\n *\n * @param listener - 변경 사항을 처리할 콜백 함수입니다.\n *\n * @returns 정리 함수를 반환합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe: "
                },
                {
                  "kind": "Content",
                  "text": "(listener: () => void) => () => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!ReactSynced:class",
          "docComment": "/**\n  *\n * 데이터를 동기화하는 ReactSynced 클래스입니다. 데이터가 업데이트될 때 리스너 함수를 호출합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ReactSynced<T> "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "ReactSynced",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSynced#connect:member",
              "docComment": "/**\n * 데이터가 업데이트될 때 호출될 리스너 함수를 연결합니다.\n *\n * @param listener - 호출될 리스너 함수입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect: "
                },
                {
                  "kind": "Content",
                  "text": "(listener: () => void) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "connect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSynced#data:member",
              "docComment": "/**\n * 동기화된 데이터를 가져옵니다.\n *\n * @returns T 타입의 동기화된 데이터 또는 데이터가 설정되지 않은 경우 null을 반환합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get data(): "
                },
                {
                  "kind": "Content",
                  "text": "T | null"
                },
                {
                  "kind": "Content",
                  "text": ";\n\nset data(data: T | null);"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSynced#listener:member",
              "docComment": "/**\n * 리스너 함수입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listener: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "listener",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSynced#unConnect:member",
              "docComment": "/**\n * 리스너 함수를 연결 해제합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unConnect: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "unConnect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!SocialAuthQueryResponse:interface",
          "docComment": "/**\n * SocialAuthQueryResponse는 소셜 로그인 인증 응답을 정의합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface SocialAuthQueryResponse "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "SocialAuthQueryResponse",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!SocialAuthQueryResponse#access_token:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "access_token: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "access_token",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!SocialAuthQueryResponse#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!SocialAuthQueryResponse#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!SocialAuthQueryResponse#errorDescription:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorDescription: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "errorDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!SocialAuthQueryResponse#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit:class",
          "docComment": "/**\n * SocialOauthInit 클래스는 소셜 로그인 초기화를 담당합니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SocialOauthInit "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SocialOauthInit",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit:constructor(1)",
              "docComment": "/**\n * 생성자 함수에서는 클라이언트 ID를 받아 초기화합니다.\n *\n * @param clientID - 소셜 로그인을 위한 클라이언트 ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(clientID: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientID",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit#clientID:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientID: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit#createOauthUrl:member(1)",
              "docComment": "/**\n * createOauthUrl 메서드는 OAuth 인증 URL을 생성합니다.\n *\n * @param params - OAuth 인증 요청에 필요한 파라미터\n *\n * @returns 생성된 OAuth 인증 URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createOauthUrl(params: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createOauthUrl"
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit.decodeOAuthState:member",
              "docComment": "/**\n * decodeOAuthState 메서드는 인코딩된 OAuth 상태를 디코딩합니다.\n *\n * @param state - 인코딩된 OAuth 상태\n *\n * @returns 디코딩된 OAuth 상태. 디코딩에 실패하면 null을 반환합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static decodeOAuthState: "
                },
                {
                  "kind": "Content",
                  "text": "<T>(state: string) => T | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "decodeOAuthState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit.encodeOAuthState:member",
              "docComment": "/**\n * encodeOAuthState 메서드는 OAuth 상태를 인코딩합니다.\n *\n * @param type - 소셜 로그인 타입\n *\n * @param returnUrl - 로그인 후 리다이렉트 될 URL\n *\n * @returns 인코딩된 OAuth 상태\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static encodeOAuthState: "
                },
                {
                  "kind": "Content",
                  "text": "<T>(state: T) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "encodeOAuthState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SocialOauthInit#oAuthBaseUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oAuthBaseUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oAuthBaseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-web!SocialType:type",
          "docComment": "/**\n * SocialType은 지원하는 소셜 로그인 타입을 나타냅니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type SocialType = "
            },
            {
              "kind": "Content",
              "text": "'kakao' | 'naver' | 'facebook' | 'google' | 'apple'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "SocialType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie:class",
          "docComment": "/**\n  *\n * 데이터를 쿠키에 동기화하는 SyncedCookie 클래스입니다. 데이터가 업데이트될 때 리스너 함수를 호출합니다. {@link @toktokhan-dev/react-web#ReactSyncConnector | `ReactSyncConnector`}와 연결하여 사용합니다.\n *\n * @example\n * ```ts\n * const cookieStorage = new SyncedCookie<string>(\"cookie-key\", { path: '/' })\n * const cookieConnector = new ReactSyncConnector(cookieStorage)\n *\n * cookieStorage.set(\"Hello, Cookie!\")\n * cookieStorage.set((prev) => prev + \"!\")\n *\n * cookieStorage.get() // \"Hello, Cookie!!\"\n * cookieStorage.remove()\n *\n * cookieStorage.get() // null\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SyncedCookie<Data> extends "
            },
            {
              "kind": "Reference",
              "text": "ReactSynced",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSynced:class"
            },
            {
              "kind": "Content",
              "text": "<Data>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Data",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "SyncedCookie",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie:constructor(1)",
              "docComment": "/**\n * SyncedCookie 인스턴스를 생성합니다. 데이터를 저장할 키와 쿠키 옵션을 받습니다.\n *\n * @param key - 데이터를 저장할 키입니다.\n *\n * @param options - 쿠키 옵션입니다. (default: { secure: true, sameSite: 'strict', path: '/' })\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CookieOptions",
                  "canonicalReference": "@toktokhan-dev/react-web!CookieOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie#defaultOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultOptions: "
                },
                {
                  "kind": "Reference",
                  "text": "CookieOptions",
                  "canonicalReference": "@toktokhan-dev/react-web!CookieOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "defaultOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie#get:member",
              "docComment": "/**\n * 쿠키에서 데이터를 가져옵니다. 저장된 json 데이터를 parse 한 후 가져옵니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get: "
                },
                {
                  "kind": "Content",
                  "text": "() => Data | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "get",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie#remove:member",
              "docComment": "/**\n * 쿠키에 저장된 데이터를 삭제합니다.\n *\n * @param options - 쿠키 옵션입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove: "
                },
                {
                  "kind": "Content",
                  "text": "(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CookieOptions",
                  "canonicalReference": "@toktokhan-dev/react-web!CookieOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie#set:member",
              "docComment": "/**\n * 쿠키에 데이터를 저장합니다. 저장할 데이터 혹은 함수를 받아서 데이터를 저장합니다.\n *\n * @param data - 저장할 데이터 혹은 데이터를 반환하는 함수입니다.\n *\n * @param options - 쿠키 옵션입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "DataOrFn",
                  "canonicalReference": "@toktokhan-dev/universal!DataOrFn$1:type"
                },
                {
                  "kind": "Content",
                  "text": "<Data | null>, options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CookieOptions",
                  "canonicalReference": "@toktokhan-dev/react-web!CookieOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "set",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie#storage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storage: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "storage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage:class",
          "docComment": "/**\n  *\n * 데이터를 동기화하는 SyncedStorage 클래스입니다. 데이터가 업데이트될 때 리스너 함수를 호출합니다. {@link @toktokhan-dev/react-web#ReactSyncConnector | `ReactSyncConnector`} 와 연결하여 사용합니다.\n *\n * @example\n * ```ts\n * const textStorage = new SyncedStorage<string>(\"text\", localStorage)\n * const textConnector = new ReactSyncConnector(textStorage)\n *\n * textStorage.set(\"Hello, World!\")\n * textStorage.set((prev) => prev + \"!\")\n *\n * textStorage.get() // \"Hello, World!!\"\n * textStorage.remove()\n *\n * textStorage.get() // null\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SyncedStorage<Data> extends "
            },
            {
              "kind": "Reference",
              "text": "ReactSynced",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSynced:class"
            },
            {
              "kind": "Content",
              "text": "<Data>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Data",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "SyncedStorage",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage:constructor(1)",
              "docComment": "/**\n * SyncedStorage 인스턴스를 생성합니다. 데이터를 저장할 키와 Storage 객체를 받습니다.\n *\n * 생성될때, storage 이벤트가 등록되며 다른 브라우저에서의 change event를 감지하여, 최신값을 가져옵니다.\n *\n * @param key - 데이터를 저장할 키입니다.\n *\n * @param storage - 데이터를 저장할 Storage 객체입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", storage: "
                },
                {
                  "kind": "Reference",
                  "text": "Storage",
                  "canonicalReference": "!Storage:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage#get:member",
              "docComment": "/**\n * Storage에 저장된 json 데이터를 parse 한 후 가져옵니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get: "
                },
                {
                  "kind": "Content",
                  "text": "() => Data | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "get",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage#remove:member",
              "docComment": "/**\n * Storage에 저장된 데이터를 삭제합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage#set:member",
              "docComment": "/**\n * Storage에 데이터를 저장합니다. 저장할 데이터 혹은 함수를 받아서 데이터를 저장합니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "DataOrFn",
                  "canonicalReference": "@toktokhan-dev/universal!DataOrFn$1:type"
                },
                {
                  "kind": "Content",
                  "text": "<Data | null>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "set",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@toktokhan-dev/react-web!SyncedStorageFactory:class",
          "docComment": "/**\n  *\n * 동기화된 스토리지를 생성하는 팩토리 역할을 합니다. 해당 클래스의 각 method 는 {@link @toktokhan-dev/react-web#ReactSyncConnector | `ReactSyncConnector`}와 {@link @toktokhan-dev/react-web#SyncedStorage | `SyncedStorage`}를 동시에 생성해줍니다.\n *\n * @example\n * ```ts\n * type TokenType = {\n *  access: string\n *  refresh: string\n * }\n * const { storage, connector } = SyncedStorageFactory.createLocal<TokenType>('token')\n *\n * storage.set({ access: 'access', refresh: 'refresh' })\n *\n * const token = useWebStorage(connector)\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SyncedStorageFactory "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SyncedStorageFactory",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorageFactory.create:member",
              "docComment": "/**\n * 스토리지를 생성합니다.\n *\n * @param key - 스토리지 키\n *\n * @param store - 스토리지 객체\n *\n * @returns 생성된 스토리지와 커넥터 객체\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create: "
                },
                {
                  "kind": "Content",
                  "text": "<Data>(key: string, store: "
                },
                {
                  "kind": "Reference",
                  "text": "Storage",
                  "canonicalReference": "!Storage:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null) => {\n    storage: "
                },
                {
                  "kind": "Reference",
                  "text": "SyncedStorage",
                  "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data> | null;\n    connector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactSyncConnector",
                  "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data>;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "create",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorageFactory.createCookie:member",
              "docComment": "/**\n * 쿠키를 생성합니다.\n *\n * @param key - 쿠키 키\n *\n * @param store - 쿠키 객체\n *\n * @returns 생성된 쿠키와 커넥터 객체\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createCookie: "
                },
                {
                  "kind": "Content",
                  "text": "<Data>(key: string, options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CookieOptions",
                  "canonicalReference": "@toktokhan-dev/react-web!CookieOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => {\n    storage: "
                },
                {
                  "kind": "Reference",
                  "text": "SyncedCookie",
                  "canonicalReference": "@toktokhan-dev/react-web!SyncedCookie:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data>;\n    connector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactSyncConnector",
                  "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data>;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createCookie",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorageFactory.createLocal:member",
              "docComment": "/**\n * 로컬 스토리지를 생성합니다.\n *\n * @param key - 스토리지 키\n *\n * @returns 생성된 스토리지와 커넥터 객체\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createLocal: "
                },
                {
                  "kind": "Content",
                  "text": "<Data>(key: string) => {\n    storage: "
                },
                {
                  "kind": "Reference",
                  "text": "SyncedStorage",
                  "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data> | null;\n    connector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactSyncConnector",
                  "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data>;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createLocal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@toktokhan-dev/react-web!SyncedStorageFactory.createSession:member",
              "docComment": "/**\n * 세션 스토리지를 생성합니다.\n *\n * @param key - 스토리지 키\n *\n * @returns 생성된 스토리지와 커넥터 객체\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createSession: "
                },
                {
                  "kind": "Content",
                  "text": "<Data>(key: string) => {\n    storage: "
                },
                {
                  "kind": "Reference",
                  "text": "SyncedStorage",
                  "canonicalReference": "@toktokhan-dev/react-web!SyncedStorage:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data> | null;\n    connector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactSyncConnector",
                  "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector:class"
                },
                {
                  "kind": "Content",
                  "text": "<Data>;\n  }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createSession",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!UploadTrigger:function(1)",
          "docComment": "/**\n * 웹에서 파일 업로드를 트리거 하는 컴포넌트 입니다.\n *\n * 자식 element 에 by 로 지정한 이벤트를 트리거 하면 display none 처리 되어있는 input[type=\"file\"] 클릭되어 파일 선택 창이 열립니다. UploadTrigger 의 props 는 숨겨져 있는 input 의 prop 으로 전달되기때문에, UploadTrigger 의 onChange prop 으로 선택된 파일에 접근이 가능합니다.\n *\n  *\n * @example\n * ```tsx\n * <UploadTrigger by=\"onClick\" onChange={(e) => console.log(e.target.files?.[0]) }>\n *   <button>Upload</button>\n * </UploadTrigger>\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UploadTrigger: ({\n  children,\n  by,\n  ...props\n}: "
            },
            {
              "kind": "Reference",
              "text": "UploadTriggerProps",
              "canonicalReference": "@toktokhan-dev/react-web!UploadTriggerProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  children,  by,  ...props}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "UploadTrigger"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!UploadTriggerProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface UploadTriggerProps extends "
            },
            {
              "kind": "Reference",
              "text": "InputHTMLAttributes",
              "canonicalReference": "@types/react!React.InputHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement",
              "canonicalReference": "!HTMLInputElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "UploadTriggerProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!UploadTriggerProps#by:member",
              "docComment": "/**\n * @default 'onClick' 자식 Element 의 props name 중 트리거 할 이벤트를 지정합니다. 기본값은 'onClick' 입니다.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "by?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "by",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!UploadTriggerProps#children:member",
              "docComment": "/**\n * 자식 Element 입니다. number 나 string 이 아닌 jsx element 나 component 를 넣어주세요\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactElement",
                  "canonicalReference": "@types/react!React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!useIntersectionObserver:function(1)",
          "docComment": "/**\n  */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useIntersectionObserver: ({\n  onVisible,\n  onHidden,\n  options\n}: "
            },
            {
              "kind": "Reference",
              "text": "UseIntersectionObserverParams",
              "canonicalReference": "@toktokhan-dev/react-web!~UseIntersectionObserverParams:type"
            },
            {
              "kind": "Content",
              "text": ", deps: "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n  targetRef: "
            },
            {
              "kind": "Reference",
              "text": "react.RefObject",
              "canonicalReference": "@types/react!React.RefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  onVisible,  onHidden,  options}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "deps",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "useIntersectionObserver"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-web!useOauthCallbackParams:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface useOauthCallbackParams<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", U = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "useOauthCallbackParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!useOauthCallbackParams#onFail:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFail?: "
                },
                {
                  "kind": "Content",
                  "text": "(params: U | null) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onFail",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-web!useOauthCallbackParams#onSuccess:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSuccess?: "
                },
                {
                  "kind": "Content",
                  "text": "(params: T | null) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSuccess",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!useOauthLinkCallback:function(1)",
          "docComment": "/**\n  *\n * OAuth 링크 콜백을 처리하는 React Hook입니다. 이 Hook은 OAuth 인증 후 리다이렉트된 페이지에서 사용됩니다.\n *\n * @param params - 콜백 함수 파라미터. `onSuccess`와 `onFail` 콜백 함수를 포함할 수 있습니다.\n *\n * @returns {LinkReturnType} OAuth 응답 데이터와 로딩 상태를 반환합니다.\n *\n * @example\n * ```tsx\n * // pages/login.tsx\n *\n * const kakao = new Kakao(ENV.CLIENT_ID)\n * const Login = () =>\n *      <KakaoButton\n *        onClick={() =>\n *          kakao.loginToLink({\n *            redirect_uri: `${window.origin}/social/callback`,\n *            state: {\n *              returnUrl: returnUrl || '/login',\n *              type: 'kakao',\n *            },\n *          })\n *        }\n *      />\n * }\n *\n *\n * // pages/social/callback.tsx\n *\n * const { data, isLoading } = useOauthLinkCallback<{type: string; returnUrl:string}>({\n *    onSuccess: (response) => {\n *      console.log(response.state.returnUrl)\n *    },\n * })\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useOauthLinkCallback: <State>(params?: "
            },
            {
              "kind": "Reference",
              "text": "useOauthCallbackParams",
              "canonicalReference": "@toktokhan-dev/react-web!useOauthCallbackParams:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State>, "
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State>>"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n  data: "
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State> | null;\n  isLoading: boolean;\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useOauthLinkCallback"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!useOauthPopupCallback:function(1)",
          "docComment": "/**\n  *\n * OAuth 팝업 콜백을 처리하는 React Hook입니다. 이 Hook은 OAuth 인증 후 팝업에서 사용됩니다.\n *\n * @param params - 콜백 함수 파라미터. `onSuccess`와 `onFail` 콜백 함수를 포함할 수 있습니다.\n *\n * @returns OAuth 응답 데이터, 로딩 상태, 팝업을 닫는 함수를 반환합니다.\n *\n * @example\n * ```tsx\n * // pages/login.tsx (parents window)\n *\n * const kakao = new Kakao(ENV.CLIENT_ID)\n * const Login = () => {\n *   const { data } = useOauthPopupListener()\n *   console.log(data, data.state.returnUrl, data.extra) // { code: '...', state: { returnUrl: '/my', type: 'kakao' }, extra: 'hello parents' }\n *\n *      <KakaoButton\n *        onClick={() =>\n *          kakao.loginToPopup({\n *            redirect_uri: `${window.origin}/social/callback`,\n *            state: {\n *              returnUrl: '/my',\n *              type: 'kakao',\n *            },\n *          })\n *        }\n *      />\n * }\n *\n * // pages/social/callback.tsx (popup window)\n *\n * const { data, isLoading } = useOauthPopupCallback<{type: string; returnUrl:string}>({\n *    onSuccess: (response) => {\n *      console.log(response.state.returnUrl)\n *      response.closePopup({ extra: 'hello parents' })\n *    },\n * })\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useOauthPopupCallback: <State>(cb?: "
            },
            {
              "kind": "Reference",
              "text": "useOauthCallbackParams",
              "canonicalReference": "@toktokhan-dev/react-web!useOauthCallbackParams:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PopupResponse",
              "canonicalReference": "@toktokhan-dev/react-web!PopupResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State>, "
            },
            {
              "kind": "Reference",
              "text": "PopupResponse",
              "canonicalReference": "@toktokhan-dev/react-web!PopupResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State>>"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n  data: "
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State> | null;\n  isLoading: boolean;\n  closePopup: (extra?: any) => void;\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cb",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useOauthPopupCallback"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!useOauthPopupListener:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useOauthPopupListener: <State, Extra = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ">(params?: "
            },
            {
              "kind": "Reference",
              "text": "useOauthCallbackParams",
              "canonicalReference": "@toktokhan-dev/react-web!useOauthCallbackParams:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State> & "
            },
            {
              "kind": "Reference",
              "text": "ExtraState",
              "canonicalReference": "@toktokhan-dev/react-web!ExtraState:interface"
            },
            {
              "kind": "Content",
              "text": "<Extra>, "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State> & "
            },
            {
              "kind": "Reference",
              "text": "ExtraState",
              "canonicalReference": "@toktokhan-dev/react-web!ExtraState:interface"
            },
            {
              "kind": "Content",
              "text": "<Extra> & {\n  msg?: string;\n}>>"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n  data: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OauthResponse",
              "canonicalReference": "@toktokhan-dev/react-web!OauthResponse:interface"
            },
            {
              "kind": "Content",
              "text": "<State> & "
            },
            {
              "kind": "Reference",
              "text": "ExtraState",
              "canonicalReference": "@toktokhan-dev/react-web!ExtraState:interface"
            },
            {
              "kind": "Content",
              "text": "<Extra>> | null;\n  isLoading: boolean;\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 23
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Extra",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "useOauthPopupListener"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-web!useSyncWebStorage:function(1)",
          "docComment": "/**\n  *\n * useSyncExternalStore 의 wrapper 입니다. {@link @toktokhan-dev/react-web#ReactSyncConnector | `ReactSyncConnector`}를 통해 외부 스토리지와 동기화를 합니다.\n *\n * @example\n * ```ts\n * const textStorage = new SyncedStorage<string>(\"text\", localStorage)\n * const textConnector = new ReactSyncConnector(textStorage)\n *\n * textStorage.set(\"Hello, World!\")\n * textStorage.set((prev) => prev + \"!\")\n *\n * textStorage.get() // \"Hello, World!!\"\n *\n * const text = useSyncWebStorage(textConnector)\n *\n * console.log(text) // \"Hello, World!!\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useSyncWebStorage: <T>(connector: "
            },
            {
              "kind": "Reference",
              "text": "ReactSyncConnector",
              "canonicalReference": "@toktokhan-dev/react-web!ReactSyncConnector:class"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T> | null"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "connector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useSyncWebStorage"
        }
      ]
    }
  ]
}