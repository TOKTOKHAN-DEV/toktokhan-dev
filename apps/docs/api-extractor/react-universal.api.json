{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.47.7",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@toktokhan-dev/react-universal!",
  "docComment": "/**\n * React 환경에서 전역적으로 사용할 수 있는 유틸리티 라이브러리입니다. {@link @toktokhan-dev/react-app#React-app | `@toktokhan-dev/react-app`} 와 {@link @toktokhan-dev/react-web#React-web | `@toktokhan-dev/react-web`}은 `@toktokhan-dev/react-universal`를 포함하고 있습니다.\n *\n * @packageDocumentation\n */\n",
  "name": "@toktokhan-dev/react-universal",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@toktokhan-dev/react-universal!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!apiLogger:function(1)",
          "docComment": "/**\n * @param  -  */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "apiLogger: (params: "
            },
            {
              "kind": "Reference",
              "text": "ApiLoggerArgs",
              "canonicalReference": "@toktokhan-dev/react-universal!ApiLoggerArgs:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "void"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "apiLogger"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-universal!ApiLoggerArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ApiLoggerArgs extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StyledConsoleArgs",
              "canonicalReference": "@toktokhan-dev/react-universal!StyledConsoleArgs:type"
            },
            {
              "kind": "Content",
              "text": ", 'method'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "ApiLoggerArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!ApiLoggerArgs#reqData:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reqData?: "
                },
                {
                  "kind": "Reference",
                  "text": "AxiosRequestConfig",
                  "canonicalReference": "axios!AxiosRequestConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "reqData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!ApiLoggerArgs#resData:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resData: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!ApiLoggerArgs#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!createContextSelector:function(1)",
          "docComment": "/**\n * @category Utils/React 커스텀 훅을 기반으로 컨텍스트와 관련된 유틸리티를 생성하는 함수입니다. 이 함수는 주어진 훅을 컨텍스트로 감싸는 `Provider`, `useContext` 훅, 그리고 컴포넌트를 컨텍스트로 감싸는 `withProvider` HOC를 반환합니다.\n *\n * @template T - 컨텍스트에서 사용할 데이터 타입  @template P - 훅의 파라미터 타입\n *\n * @param useHook - 컨텍스트에서 사용할 커스텀 훅\n *\n * @param initialProps - `useHook`에 전달될 초기 파라미터 (선택적)\n *\n * @returns `{ useContext, Provider, withProvider }` - 생성된 컨텍스트 유틸리티들\n *\n * @example\n * ```tsx\n * // 커스텀 훅 정의\n * const useTimer = ({ timeLimit = 1000 }: { timeLimit?: number }) => {\n *   const [time, setTime] = useState(timeLimit);\n *   // 타이머 로직...\n *   return { time, start: () => { //타이머 시작 }};\n * };\n *\n * // createContextSelector로 컨텍스트 유틸리티 생성\n * const { Provider: TimerProvider, useContext: useTimerContext } = createContextSelector(useTimer);\n *\n * // 타이머를 표시하는 컴포넌트\n * const TimerDisplay = () => {\n *   const time = useTimerContext(ctx => ctx.time);\n *   return <div>Time: {time}</div>;\n * };\n *\n * // 방법 1. TimerProvider로 감싸기\n * const App = () => (\n *   <TimerProvider params={{timeLimit: 1000}}>\n *     <TimerDisplay />\n *   </TimerProvider>\n * );\n *\n * // 방법 2. withProvider로 컴포넌트 감싸기\n * const App = () => (\n *     <TimerDisplay />\n * );\n * export default withTimerProvider(App, { timeLimit: 1000 });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createContextSelector: <T, P = "
            },
            {
              "kind": "Content",
              "text": "undefined"
            },
            {
              "kind": "Content",
              "text": ">(useHook: "
            },
            {
              "kind": "Content",
              "text": "(param?: P) => T"
            },
            {
              "kind": "Content",
              "text": ", initialProps?: "
            },
            {
              "kind": "Content",
              "text": "P"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "CreateContextSelectorReturn",
              "canonicalReference": "@toktokhan-dev/react-universal!CreateContextSelectorReturn:type"
            },
            {
              "kind": "Content",
              "text": "<T, P>"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "useHook",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "initialProps",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createContextSelector"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-universal!CreateContextSelectorReturn:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type CreateContextSelectorReturn<T, P> = "
            },
            {
              "kind": "Content",
              "text": "{\n  useContext: <Selected>(selector: (value: T) => Selected) => Selected;\n  Provider: ({\n    children,\n    params\n  }: {\n    children: "
            },
            {
              "kind": "Reference",
              "text": "ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    params?: P;\n  }) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n  withProvider: <C extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@types/react!React.ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<any>>(Component: C, params?: P) => (props: "
            },
            {
              "kind": "Reference",
              "text": "PropsOf",
              "canonicalReference": "@toktokhan-dev/react-universal!PropsOf:type"
            },
            {
              "kind": "Content",
              "text": "<C>) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "CreateContextSelectorReturn",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          },
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!createSlice:function(1)",
          "docComment": "/**\n * @param  -  */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createSlice: <S, R extends "
            },
            {
              "kind": "Reference",
              "text": "ReducerMap",
              "canonicalReference": "@toktokhan-dev/react-universal!~ReducerMap:type"
            },
            {
              "kind": "Content",
              "text": "<S, any>"
            },
            {
              "kind": "Content",
              "text": ">({\n  initialState,\n  reducers\n}: "
            },
            {
              "kind": "Reference",
              "text": "CreateReducerParams",
              "canonicalReference": "@toktokhan-dev/react-universal!~CreateReducerParams:type"
            },
            {
              "kind": "Content",
              "text": "<S, R>"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n  initialState: S;\n  reducer: void | S extends "
            },
            {
              "kind": "Reference",
              "text": "ValidRecipeReturnType",
              "canonicalReference": "@toktokhan-dev/react-universal!~ValidRecipeReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<S> ? (base: "
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "immer!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<S>, action: "
            },
            {
              "kind": "Reference",
              "text": "ActionsByMap",
              "canonicalReference": "@toktokhan-dev/react-universal!~ActionsByMap:type"
            },
            {
              "kind": "Content",
              "text": "<S, R>) => S : never;\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  initialState,  reducers}",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createSlice"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@toktokhan-dev/react-universal!defMessage:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "defMessage = "
            },
            {
              "kind": "Content",
              "text": "\"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uACE0\\uAC1D\\uC13C\\uD130\\uC5D0 \\uBB38\\uC758\\uD574\\uC8FC\\uC138\\uC694.\""
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "defMessage",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          },
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!EmptyView:function(1)",
          "docComment": "/**\n * `EmptyView` 컴포넌트는 데이터가 비어있는 경우 `fallback`을, 데이터가 존재하는 경우 `children`을 렌더링합니다.\n *\n  *\n * @returns 조건에 따라 `children` 또는 `fallback`을 렌더링합니다.\n *\n * @example\n * ```tsx\n * import EmptyView from './components/StateViews/EmptyView';\n *\n * const MyComponent = ({ data }) => (\n *   <EmptyView data={data} fallback={<div>데이터가 없습니다.</div>}>\n *     <div>데이터가 존재합니다.</div>\n *   </EmptyView>\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EmptyView: ({\n  children,\n  data,\n  fallback\n}: "
            },
            {
              "kind": "Reference",
              "text": "EmptyViewProps",
              "canonicalReference": "@toktokhan-dev/react-universal!EmptyViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  children,  data,  fallback}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "EmptyView"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-universal!EmptyViewProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface EmptyViewProps "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "EmptyViewProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!EmptyViewProps#children:member",
              "docComment": "/**\n * 데이터가 존재할 때 렌더링될 UI 요소\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!EmptyViewProps#data:member",
              "docComment": "/**\n * 검사할 데이터 배열\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data?: "
                },
                {
                  "kind": "Content",
                  "text": "unknown[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!EmptyViewProps#fallback:member",
              "docComment": "/**\n * 데이터가 비어 있을 때 렌더링될 UI 요소\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fallback: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fallback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-universal!ErrorMessage:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ErrorMessage = "
            },
            {
              "kind": "Content",
              "text": "{\n  [key: string]: any;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "ErrorMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!fileToBase64:function(1)",
          "docComment": "/**\n * @param  -  *\n * 개선\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "fileToBase64: (file: "
            },
            {
              "kind": "Reference",
              "text": "File",
              "canonicalReference": "!File:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string | "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            },
            {
              "kind": "Content",
              "text": " | null>"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "file",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "fileToBase64"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!formatNumberKR:function(1)",
          "docComment": "/**\n * @param  -  */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "formatNumberKR: (num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "formatNumberKR"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!formatPhoneNumberKR:function(1)",
          "docComment": "/**\n * @param  -  */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "formatPhoneNumberKR: (phone: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "phone",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "formatPhoneNumberKR"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!genErrorByServer:function(1)",
          "docComment": "/**\n * 서버에서 발생한 오류를 기반으로 에러 메세지 객체를 반환합니다. 외부 백엔드와 협업시에 에러타입을 확인해주세요. api logger에서 사용하고 있으며, 에러 메세지를 통해 toast, alert 등에 적용시킬 수 있습니다.\n *\n * @category Utils/Logger  @template T - AxiosError 타입의 제네릭 매개변수입니다.\n *\n * @param errors - AxiosError 객체입니다.\n *\n * @returns 서버에서 발생한 오류에 기반한 에러메세지 객체입니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "genErrorByServer: <T extends "
            },
            {
              "kind": "Reference",
              "text": "AxiosError",
              "canonicalReference": "axios!AxiosError:class"
            },
            {
              "kind": "Content",
              "text": "<{\n  message: "
            },
            {
              "kind": "Reference",
              "text": "ErrorMessage",
              "canonicalReference": "@toktokhan-dev/react-universal!ErrorMessage:type"
            },
            {
              "kind": "Content",
              "text": ";\n}, any>"
            },
            {
              "kind": "Content",
              "text": ">(errors: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "GenErrorByServerType",
              "canonicalReference": "@toktokhan-dev/react-universal!GenErrorByServerType:type"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "errors",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "genErrorByServer"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-universal!GenErrorByServerType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type GenErrorByServerType = "
            },
            {
              "kind": "Content",
              "text": "{\n  defMessage?: string;\n  list?: "
            },
            {
              "kind": "Reference",
              "text": "FormattedError",
              "canonicalReference": "@toktokhan-dev/react-universal!~FormattedError:type"
            },
            {
              "kind": "Content",
              "text": "[];\n  messagesWithKey?: string;\n  messages?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "GenErrorByServerType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!LoadingView:function(1)",
          "docComment": "/**\n * `LoadingView` 컴포넌트는 로딩 상태를 처리하여 로딩 중일 때는 `fallback`을, 로딩이 완료되었을 때는 `children`을 렌더링합니다.\n *\n  *\n * @returns 조건에 따라 `children` 또는 `fallback`을 렌더링합니다.\n *\n * @example\n * ```tsx\n * import LoadingView from './components/StateViews/LoadingView';\n *\n * const MyComponent = ({ isLoading }) => (\n *   <LoadingView isLoading={isLoading} fallback={<div>로딩 중...</div>}>\n *     <div>로딩이 완료되었습니다.</div>\n *   </LoadingView>\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LoadingView: ({\n  children,\n  isLoading,\n  fallback\n}: "
            },
            {
              "kind": "Reference",
              "text": "LoadingViewProps",
              "canonicalReference": "@toktokhan-dev/react-universal!LoadingViewProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "react_jsx_runtime.JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  children,  isLoading,  fallback}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "LoadingView"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-universal!LoadingViewProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface LoadingViewProps "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "LoadingViewProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!LoadingViewProps#children:member",
              "docComment": "/**\n * 로딩이 완료되었을 때 렌더링될 UI 요소\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!LoadingViewProps#fallback:member",
              "docComment": "/**\n * 로딩 중일 때 렌더링될 UI 요소\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fallback: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactNode",
                  "canonicalReference": "@types/react!React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fallback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!LoadingViewProps#isLoading:member",
              "docComment": "/**\n * 로딩 상태를 나타내는 boolean 값\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLoading?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-universal!PropsOf:type",
          "docComment": "/**\n * 주어진 컴포넌트의 props 타입을 추론하는 유틸리티 타입입니다.  *\n * @template T - props 타입을 추론할 컴포넌트.\n *\n * @returns `T`가 `ComponentType` 또는 `Component`를 확장하는 경우 추론된 props 타입, 그렇지 않은 경우 `never`.\n *\n * @example\n * ```tsx\n * type Example = ComponentProps<(props: { number: number }) => JSX.Element>;\n * Example === { number : number }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type PropsOf<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "@types/react!React.ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<infer P> | "
            },
            {
              "kind": "Reference",
              "text": "Component",
              "canonicalReference": "@types/react!React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<infer P> ? P : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "PropsOf",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          },
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!styledConsole:function(1)",
          "docComment": "/**\n * @param  -  */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function styledConsole({\n  topic,\n  title,\n  data,\n  topicColor,\n  method,\n  errors\n}: "
            },
            {
              "kind": "Reference",
              "text": "StyledConsoleArgs",
              "canonicalReference": "@toktokhan-dev/react-universal!StyledConsoleArgs:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  topic,  title,  data,  topicColor,  method,  errors}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "styledConsole"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-universal!StyledConsoleArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type StyledConsoleArgs = "
            },
            {
              "kind": "Content",
              "text": "{\n  topic?: string;\n  title?: string;\n  data: unknown;\n  topicColor?: "
            },
            {
              "kind": "Reference",
              "text": "CSSProperties",
              "canonicalReference": "@types/react!React.CSSProperties:interface"
            },
            {
              "kind": "Content",
              "text": "['color'];\n  method?: 'log' | 'warn' | 'error' | 'info';\n  errors?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "StyledConsoleArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "parameters": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@toktokhan-dev/react-universal!TimerProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface TimerProps "
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "TimerProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps#autoStart:member",
              "docComment": "/**\n * 타이머가 초기화 시 자동으로 시작될지 여부  @default true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoStart?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps#interval:member",
              "docComment": "/**\n * 타이머가 업데이트되는 간격(밀리초 단위)  @default 1000ms\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interval?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "interval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps#onTimeOver:member",
              "docComment": "/**\n * 시간이 종료되었을 때 호출되는 콜백 함수\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTimeOver?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTimeOver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps#onTimeUpdate:member",
              "docComment": "/**\n * 매 시간 업데이트 시 호출되는 콜백 함수\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTimeUpdate?: "
                },
                {
                  "kind": "Content",
                  "text": "(time: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTimeUpdate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps#setTimeFormat:member",
              "docComment": "/**\n * 시간을 표시하는 형식을 설정하는 함수  @default ()=>\"mm:ss\" 형식\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTimeFormat?: "
                },
                {
                  "kind": "Content",
                  "text": "(time: number) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "setTimeFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps#timeLimit:member",
              "docComment": "/**\n * 타이머의 제한 시간(밀리초 단위)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeLimit?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeLimit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [],
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!TimerProvider:function(1)",
          "docComment": "/**\n * @category Hooks/useTimer()/Context(Optional) 이 프로바이더는 타이머 상태를 컨텍스트를 통해 지역/전역적으로 관리할 수 있도록 해줍니다.\n *\n * @remarks\n *\n * 컨텍스트를 사용하지 않아도 타이머 훅을 직접 사용할 수 있으며, 컨텍스트가 필요한 경우에만 사용하시기 바랍니다. 예를 들어, 다수의 컴포넌트에서 타이머 상태를 공유하거나, 전역적으로 타이머 상태를 관리해야 하는 경우에 유용합니다.\n *\n * @example\n * ```tsx\n * // TimerContainer.tsx\n * import React from 'react';\n * import { TimerProvider } from '@toktokhan-dev/react-universal';\n * import TimerDisplay from './TimerDisplay';\n *\n * const TimerContainer = () => {\n *   return (\n *     <TimerProvider\n *        params={{\n *          autoStart: false,\n *          timeLimit: 1000 * 5,\n *        }}\n *      >\n *       <TimerDisplay />\n *     </TimerProvider>\n *   );\n * };\n *\n * export default TimerContainer;\n *\n * // TimerDisplay.tsx\n * const TimerDisplay = () => {\n *   // 불필요한 리랜더링 방지를 위해 selector로 가져오시는 것을 권장합니다.\n *   const time = useTimerContext((ctx) => ctx?.time)\n *   const start = useTimerContext((ctx) => ctx?.start)\n *\n *   return (\n *     <div>\n *       <button onClick={start}>Start Timer</button>\n *       <p>Remaining Time: {time}</p>\n *     </div>\n *   );\n * };\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TimerProvider: ({\n  children,\n  params\n}: "
            },
            {
              "kind": "Content",
              "text": "{\n  children: "
            },
            {
              "kind": "Reference",
              "text": "react.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n  params?: "
            },
            {
              "kind": "Reference",
              "text": "TimerProps",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!__global.JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  children,  params}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "TimerProvider"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@toktokhan-dev/react-universal!TimerStatus:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type TimerStatus = "
            },
            {
              "kind": "Content",
              "text": "'RUNNING' | 'PAUSED' | 'STOPPED'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "releaseTag": "Public",
          "name": "TimerStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "parameters": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!useCallbackRef:function(1)",
          "docComment": "/**\n  */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useCallbackRef: <T extends "
            },
            {
              "kind": "Reference",
              "text": "Fn",
              "canonicalReference": "@toktokhan-dev/universal!Fn:type"
            },
            {
              "kind": "Content",
              "text": ">(callback: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "T"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCallbackRef"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!useTimer:function(1)",
          "docComment": "/**\n * @category Hooks/useTimer() 타이머를 관리하는 커스텀 훅입니다.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useTimer: ({\n  autoStart,\n  timeLimit,\n  interval,\n  setTimeFormat,\n  onTimeOver,\n  onTimeUpdate\n}?: "
            },
            {
              "kind": "Reference",
              "text": "TimerProps",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n  time: string;\n  isEnd: boolean;\n  start: () => void;\n  restart: () => void;\n  pause: () => void;\n  reset: () => void;\n}"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{  autoStart,  timeLimit,  interval,  setTimeFormat,  onTimeOver,  onTimeUpdate}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "useTimer"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!useTimerContext:function(1)",
          "docComment": "/**\n * @category Hooks/useTimer()/Context(Optional) 타이머 컨텍스트를 사용하는 커스텀 훅입니다. selector를 통해 컨텍스트의 값을 가져올 수 있습니다.\n *\n * @remarks\n *\n * 컨텍스트를 사용하지 않아도 타이머 훅을 직접 사용할 수 있으며, 컨텍스트가 필요한 경우에만 사용하시기 바랍니다. 예를 들어, 다수의 컴포넌트에서 타이머 상태를 공유하거나, 전역적으로 타이머 상태를 관리해야 하는 경우에 유용합니다.\n *\n * @example\n * ```tsx\n * import React from 'react';\n * import { useTimerContext } from '@toktokhan-dev/react-universal';\n *\n * const TimerDisplay = () => {\n *   // 불필요한 리랜더링 방지를 위해 selector로 가져오시는 것을 권장합니다.\n *   const time = useTimerContext((ctx) => ctx?.time)\n *   const start = useTimerContext((ctx) => ctx?.start)\n *\n *   return (\n *     <div>\n *       <button onClick={start}>Start Timer</button>\n *       <p>Remaining Time: {time}</p>\n *     </div>\n *   );\n * };\n *\n * export default TimerDisplay;\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useTimerContext: <Selected>(selector: "
            },
            {
              "kind": "Content",
              "text": "(value: {\n  time: string;\n  isEnd: boolean;\n  start: () => void;\n  restart: () => void;\n  pause: () => void;\n  reset: () => void;\n}) => Selected"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "Selected"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Selected",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useTimerContext"
        },
        {
          "kind": "Function",
          "canonicalReference": "@toktokhan-dev/react-universal!withTimerProvider:function(1)",
          "docComment": "/**\n * @category Hooks/useTimer()/Context(Optional) 타이머 컨텍스트를 제공하는 컴포넌트 HOC입니다. 이 HOC를 사용하여 컴포넌트를 래핑하면, 해당 컴포넌트와 하위 컴포넌트에서 타이머 상태를 공유할 수 있습니다.\n *\n * @remarks\n *\n * 컨텍스트를 사용하지 않아도 타이머 훅을 직접 사용할 수 있으며, 컨텍스트가 필요한 경우에만 사용하시기 바랍니다. 예를 들어, 다수의 컴포넌트에서 타이머 상태를 공유하거나, 전역적으로 타이머 상태를 관리해야 하는 경우에 유용합니다.\n *\n * @example\n * ```tsx\n * // TimerContainer.tsx\n * import React from 'react';\n * import { withTimerProvider, useTimerContext } from '@toktokhan-dev/react-universal';\n *\n * const TimerContainer = () => {\n *   return <TimerDisplay />;\n * };\n *\n * export default withTimerProvider(TimerContainer, {\n *  autoStart: false,\n *  timeLimit: 1000 * 5,\n * });\n *\n * // TimerDisplay.tsx\n * const TimerDisplay = () => {\n *   // 불필요한 리랜더링 방지를 위해 selector로 가져오시는 것을 권장합니다.\n *   const time = useTimerContext((ctx) => ctx?.time)\n *   const start = useTimerContext((ctx) => ctx?.start)\n *\n *   return (\n *     <div>\n *       <button onClick={start}>Start Timer</button>\n *       <p>Remaining Time: {time}</p>\n *     </div>\n *   );\n * };\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "withTimerProvider: <C extends "
            },
            {
              "kind": "Reference",
              "text": "react.ComponentType",
              "canonicalReference": "@types/react!React.ComponentType:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(Component: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", params?: "
            },
            {
              "kind": "Reference",
              "text": "TimerProps",
              "canonicalReference": "@toktokhan-dev/react-universal!TimerProps:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "PropsOf",
              "canonicalReference": "@toktokhan-dev/react-universal!PropsOf:type"
            },
            {
              "kind": "Content",
              "text": "<C>) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!__global.JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/index.doc.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "Component",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "withTimerProvider"
        }
      ]
    }
  ]
}