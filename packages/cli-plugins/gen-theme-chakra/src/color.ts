import { createObjBySelector, maybe, pass } from '@toktokhan-dev/universal'

import { flow, mapKeys, mapValues, prop, replace } from 'lodash/fp'

import { ThemeToken, TokenModes } from './type'
import { assertNullish } from './utils/assert-nullish'
import { throwError } from './utils/throw-error'

const getColorKey: (str: string) => string = replace(/-/g, '.')
const refColorSchema = (key: string) => `colorSchema["${key}"]`

const getColorSchemaObj: (
  json: ThemeToken['colors'],
) => Record<string, string> = flow(
  prop('colorSchema'), //
  mapKeys(getColorKey),
  mapValues(
    flow(
      prop('value'),
      assertNullish("not found value. Please check 'colorSchema' value."),
    ),
  ),
)

const checkValidToken = (val: object, tokenModes: TokenModes) => {
  if (!(tokenModes['light'] in val)) {
    throwError(
      `The light key for tokenModes is not found in the semanticTokens objects. You can customize tokenModes in the tok-cli.config.ts file.`,
    )
  }
  if (Object.values(val).length === 2 && !(tokenModes['dark'] in val)) {
    throwError(
      `The dark key for tokenModes is not found in the semanticTokens objects. You can customize tokenModes in the tok-cli.config.ts file`,
    )
  }
  return
}

const getColorTokenObj = (
  json: ThemeToken['colors'],
  tokenModes: TokenModes,
): Record<string, { default: string; _dark?: string }> =>
  flow(
    pass(json),
    prop('semanticTokens'), //
    mapKeys(getColorKey),
    mapValues(
      flow(
        (identity) => {
          checkValidToken(identity, tokenModes)
          return identity
        },
        createObjBySelector({
          default: flow(
            prop(`${tokenModes['light']}.ref`),
            getColorKey,
            refColorSchema,
          ),
          _dark: flow(
            prop(`${tokenModes['dark']}.ref`),
            maybe,
            maybe.map(flow(getColorKey, refColorSchema)),
            maybe.value,
          ),
        }),
      ),
    ),
  )()

export const renderColor = (
  json: ThemeToken['colors'],
  tokenModes: TokenModes = {
    light: 'light',
    dark: 'dark',
  },
): string => {
  const colorSchema = getColorSchemaObj(json)
  const colorToken = getColorTokenObj(json, tokenModes)

  return `
    /**
     * !DO NOT EDIT THIS FILE
     * 
     * gnerated by script: tokript gen:theme
     * 
     * theme color 를 정의하는 곳입니다.
     * dark 모드를 대응하기 위해 semantic token 을 사용해서 정의합니다.
     *
     * @see https://chakra-ui.com/docs/styled-system/semantic-tokens
    **/


    export const colorSchema = ${JSON.stringify(colorSchema, null, 2)}

    export const colors = ${JSON.stringify(colorToken, null, 2)
      .replaceAll(/"colorSchema\[(.*)\]"/g, 'colorSchema[$1]')
      .replaceAll('\\', '')}
  `
}
