import { createObjBySelector, pass } from '@toktokhan-dev/universal'

import { flow, mapKeys, mapValues, prop, replace } from 'lodash/fp'

import { ColorModes, ThemeToken } from './type'
import { assertNullish } from './utils/assert-nullish'
import { throwError } from './utils/throw-error'

const isNumeric = (v: any) => {
  return !isNaN(parseFloat(v))
}

const getColorKey: (str: string) => string = flow(
  replace(/\s/g, ''),
  replace(/-/g, '.'),
)

const getColorTokenKey: (str: string) => string = flow(getColorKey, (str) => {
  const splitted = str.split('.')
  if (isNumeric(splitted.at(-1))) {
    const temp = [...splitted]
    const last = temp.pop()
    return temp.join('-') + `.${last}`
  }

  return splitted.join('-')
})
const refColorSchema = (key: string) => `colorSchema["${key}"]`

/**
 * 주어진 JSON 객체에서 색상 스키마를 추출하고 변환합니다.
 *
 * @param json - 색상 스키마가 포함된 ThemeToken 객체입니다.
 * @returns 변환된 색상 스키마 객체를 반환합니다.
 */
const getColorSchemaObj: (
  json: ThemeToken['colors'],
) => Record<string, string> = flow(
  prop('colorSchema'), //
  mapKeys(getColorTokenKey),
  mapValues(
    flow(
      prop('value'),
      assertNullish("not found value. Please check 'colorSchema' value."),
    ),
  ),
)

/**
 * 주어진 값 객체가 유효한 토큰 모드를 가지고 있는지 확인합니다.
 *
 * @param val - 확인할 값 객체입니다.
 * @param tokenModes - 확인할 토큰 모드 객체입니다.
 */
const checkValidToken = (val: object, tokenModes: Required<ColorModes>) => {
  if (!(tokenModes['light'] in val)) {
    throwError(
      'The light key for "tokenModes" is not found in the semanticTokens objects.',
    )
  }
  if (Object.values(val).length === 2 && !(tokenModes['dark'] in val)) {
    throwError(
      `The dark key for "tokenModes" is not found in the semanticTokens objects.`,
    )
  }
  return
}

/**
 * 주어진 모드에 따라 토큰 값을 반환합니다.
 *
 * @param mode - 토큰 값을 가져올 모드입니다.
 * @returns 주어진 토큰에 대한 값을 반환하는 함수입니다.
 */
const getTokenValue = (mode: string) => (token: any) => {
  const ref = prop(`${mode}.ref`)(token)
  const value = prop(`${mode}.value`)(token)
  if (ref) return flow(getColorTokenKey, refColorSchema)(ref)
  return value
}

/**
 * 주어진 JSON 객체에서 색상 토큰을 추출하고 변환합니다.
 *
 * @param json - 색상 토큰이 포함된 ThemeToken 객체입니다.
 * @param mode - 색상 모드 객체입니다.
 * @returns 변환된 색상 토큰 객체를 반환합니다.
 */
const getColorTokenObj = (
  json: ThemeToken['colors'],
  mode: Required<ColorModes>,
): Record<string, { default: string; _dark?: string }> =>
  flow(
    pass(json),
    prop('semanticTokens'), //
    mapKeys(getColorKey),
    mapValues(
      flow(
        (identity) => {
          checkValidToken(identity, mode)
          return identity
        },
        createObjBySelector({
          default: getTokenValue(mode['light']),
          _dark: getTokenValue(mode['dark']),
        }),
      ),
    ),
  )()

/**
 * 주어진 JSON 객체를 기반으로 색상 스키마와 색상 토큰을 생성하고 렌더링합니다.
 *
 * @param json - 색상 스키마와 색상 토큰이 포함된 ThemeToken 객체입니다.
 * @param tokenModes - 색상 모드 객체입니다.
 * @returns 렌더링된 색상 스키마와 색상 토큰 문자열을 반환합니다.
 */
export const renderColor = (
  json: ThemeToken['colors'],
  tokenModes: Required<ColorModes>,
): string => {
  const colorSchema = getColorSchemaObj(json)
  const colorToken = getColorTokenObj(json, tokenModes)

  return `
    /**
     * !DO NOT EDIT THIS FILE
     * 
     * gnerated by script: tokript gen:theme
     * 
     * theme color 를 정의하는 곳입니다.
     * dark 모드를 대응하기 위해 semantic token 을 사용해서 정의합니다.
     *
     * @see https://chakra-ui.com/docs/styled-system/semantic-tokens
    **/

    export const colorSchema = ${JSON.stringify(colorSchema, null, 2)}

    export const colors = ${JSON.stringify(colorToken, null, 2)
      .replaceAll(/"colorSchema\[(.*)\]"/g, 'colorSchema[$1]')
      .replaceAll('\\', '')}
  `
}
