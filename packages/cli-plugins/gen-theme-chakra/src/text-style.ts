import { multiply, pass, removeStr } from '@toktokhan-dev/universal'

import { isObject } from 'lodash'
import { flow, invert, mapKeys, mapValues, replace } from 'lodash/fp'

import {
  ExtractResponsiveValue,
  SwatTextStyleMode,
  TextStyleInputValue,
  TextStyleModes,
  ThemeToken,
} from './type'
import { mapObj } from './utils/map-obj'
import { throwError } from './utils/throw-error'

import { GenThemeConfig } from '.'

const BREAKPOINT_ORDER = ['base', 'sm', 'md', 'lg', 'xl', '2xl']

const removeSpace: (str: string) => string = replace(/\s/g, '')

export const coverTextStyleByKey = <T extends keyof TextStyleInputValue>(
  key: T,
  value: ExtractResponsiveValue<TextStyleInputValue[T]>,
) => {
  const percentToNumber = flow(
    removeStr('%'), //
    Number,
    multiply(0.01),
    (number) => {
      return Number(number.toFixed(2))
    },
  )
  switch (key) {
    case 'lineHeight': {
      return percentToNumber(value as string)
    }
    case 'letterSpacing': {
      return `${percentToNumber(value as string)}em`
    }

    default: {
      return value
    }
  }
}

/**
 * 주어진 객체의 키를 미리 정의된 순서에 따라 정렬합니다.
 *
 * @param obj - 정렬할 키-값 쌍을 포함하는 객체입니다.
 * @returns 키가 미리 정의된 순서대로 정렬된 새 객체를 반환합니다.
 *
 */
const sortKeys =
  <T>(order: string[]) =>
  (obj: Record<string, T>) => {
    const sortedObj: Record<string, T> = {}
    order.forEach((key) => {
      if (key in obj) {
        sortedObj[key] = obj[key]
      }
    })
    return sortedObj
  }

/**
 * 주어진 객체의 키를 제공된 키 맵에 따라 매핑합니다. 키 맵에 존재하지 않는 키가 있을 경우,
 * 해당 키가 tokenMode에서 유효하지 않다는 메시지를 로그로 출력합니다.
 * @param obj - 키를 매핑할 객체입니다.
 * @param keyMap - 기존 키를 새로운 키로 매핑하는 객체입니다.
 * @returns 키가 매핑된 새로운 객체를 반환합니다.
 */
const matchKey =
  (keyMap?: SwatTextStyleMode) => (obj: ArrayLike<string | number>) =>
    mapKeys((key: string) => {
      if (!keyMap || Object.keys(keyMap).length === 0) {
        return throwError(`The given value requires tokenMode.`)
      }
      if (!keyMap?.[key]) {
        return throwError(`This "${key}" is not a valid value in tokenMode.`)
      }
      return keyMap[key]
    })(obj)

/**
 * 텍스트 스타일 변환의 공통 로직을 처리하는 함수입니다.
 *
 * @param json - 변환할 텍스트 스타일 객체입니다.
 * @param mode - 선택적 키 매핑 객체입니다.
 * @param postProcess - 변환 후 추가 처리를 위한 함수입니다.
 * @returns 변환된 텍스트 스타일 객체를 반환합니다.
 */
const processTextStyle = (
  json: ThemeToken['textStyles'],
  mode: SwatTextStyleMode,
  postProcess: (obj: Record<string, any>) => Record<string, any>,
) =>
  flow(
    pass(json),
    mapKeys(removeSpace),
    mapValues(
      mapObj(([key, value]) => {
        if (isObject(value)) {
          return [
            key,
            flow(
              pass(value),
              matchKey(mode),
              sortKeys(BREAKPOINT_ORDER),
              mapValues((val) =>
                isObject(val) ? val : coverTextStyleByKey(key, val as any),
              ),
            )(),
          ]
        }
        return [key, coverTextStyleByKey(key, value as string)]
      }),
    ),
    postProcess,
  )()

/**
 * Chakra UI v2 버전에서 사용할 텍스트 스타일 변환 함수
 *
 * @param json - 변환할 텍스트 스타일 객체입니다.
 * @param mode - 선택적 키 매핑 객체입니다. 이 객체는 텍스트 스타일의 키를 변환하는 데 사용됩니다.
 * @returns 변환된 텍스트 스타일 객체를 반환합니다.
 */
const getTextStyleObjV2 = (
  json: ThemeToken['textStyles'],
  mode: SwatTextStyleMode,
) => processTextStyle(json, mode, (obj) => obj)

/**
 * Chakra UI v3 버전에서 사용할 텍스트 스타일 변환 함수
 *
 * @param json - 변환할 텍스트 스타일 객체입니다.
 * @param mode - 선택적 키 매핑 객체입니다. 이 객체는 텍스트 스타일의 키를 변환하는 데 사용됩니다.
 * @returns 변환된 텍스트 스타일 객체를 반환합니다.
 */
const getTextStyleObjV3 = (
  json: ThemeToken['textStyles'],
  mode: SwatTextStyleMode,
) =>
  processTextStyle(
    json,
    mode,
    mapValues((style) => ({ value: style })),
  )

/**
 * 주어진 JSON 객체의 텍스트 스타일을 변환합니다.
 * Chakra UI 버전에 따라 적절한 함수를 선택합니다.
 *
 * @param json - 변환할 텍스트 스타일 객체입니다.
 * @param mode - 선택적 키 매핑 객체입니다. 이 객체는 텍스트 스타일의 키를 변환하는 데 사용됩니다.
 * @param version - Chakra UI 버전입니다.
 * @returns 변환된 텍스트 스타일 객체를 반환합니다.
 */
const getTextStyleObj = (
  json: ThemeToken['textStyles'],
  mode: SwatTextStyleMode,
  version?: GenThemeConfig['version'],
) => {
  if (version === 'v2') {
    return getTextStyleObjV2(json, mode)
  }
  // v3 또는 기본값
  return getTextStyleObjV3(json, mode)
}

/**
 * 주어진 JSON 객체를 기반으로  chakra-ui theme 에 사용될 파일 컨텐츠를 생성합니다.
 *
 * @param json textStyles의 ThemeToken 객체입니다.
 * @param tokenModes - textStyles 모드 객체입니다.
 * @param chakraVersion - Chakra UI 버전 정보입니다.
 * @returns chakra-ui theme에 적용가능한 textStyle이 출력됩니다.
 */

export const renderTextStyle = (
  json: ThemeToken['textStyles'],
  tokenModes: TextStyleModes,
  chakraVersion?: GenThemeConfig['version'],
): string => {
  const modes = tokenModes
  const swapMode = invert(modes) as SwatTextStyleMode
  const textStyle = getTextStyleObj(json, swapMode, chakraVersion)

  return `
    /**
     * !DO NOT EDIT THIS FILE
     * 
     * generated by script: tokript gen:theme
     * 
     * theme text style 을 정의하는 곳입니다.
     *
     * @see https://chakra-ui.com/docs/styled-system/semantic-tokens
    **/
    
    export const textStyles = ${JSON.stringify(textStyle, null, 2)}
  `
}
