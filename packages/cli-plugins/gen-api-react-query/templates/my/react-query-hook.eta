<%
  const { utils, route, config, myConfig, dataFromApiTemplate } = it;
  const { query } = route.request;
  const { errorType } = route.response;
  const { getConfigByRoute,paginationTargetKeywords } = dataFromApiTemplate;


  const { 
    conditions:{
      hasPagination,
      isQuery,
      isMutation,
      isOptialnalVariabels,
    },
    data: {
      rawWrapperArgs,
      wrapperArgs,
      queryKeyName,
      functionName,
      apiInstanceName,
      apiClassName,
      hookVariant,
      key,
      methodKey,
      pagination
    },
    utils: {
      upperSnakeCase,
      removeModuleName,
      argToTmpl,
    }
  } = getConfigByRoute(route);

  const { _, classNameCase } = utils;

  const conditionalParamsText = isOptialnalVariabels ? "params?" : "params"
  const conditionCallWithVariabels = isQuery ? `(${conditionalParamsText}.variables)` : "";
  const conditionParamQueryKey = isQuery ? `,${conditionalParamsText}.variables` : "";
  const conditionWrapFunc =  isQuery ? "() =>" : "";
  const conditionalQueryKeyParams =  isQuery ? `${conditionalParamsText}.variables` : "";
  const conditionalFn =  isQuery ? "queryFn" : "mutationFn";

  const routeDocs = includeFile("@base/route-docs", { config, route, utils });
  const lowerhookVariant =  _.lowerCase(hookVariant)
  const hookKeyName = `${lowerhookVariant}Key`;

  const isAxiosInstance = myConfig.httpClientType === 'axios'


  const initialPageParam = () => {
    if(typeof pagination.initialPageParam === "string") return pagination.initialPageParam;
    if(typeof pagination.initialPageParam === "function") return pagination.initialPageParam({ apiInstanceName, functionName, pagination})
  }

  const getNextPage = () => {
    if(typeof pagination.getNextPage === "string") return pagination.getNextPage;
    if(typeof pagination.getNextPage === "function") return pagination.getNextPage({ apiInstanceName, functionName, pagination})
  }

  const getNextPageParam = () => {
    if(typeof pagination.getNextPageParam === "string") return pagination.getNextPageParam;
    if(typeof pagination.getNextPageParam === "function") return pagination.getNextPageParam({ apiInstanceName, functionName, pagination})
  }


 %>

 /**
 <%~ routeDocs.description %>

 * <% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>
 */

<% if (isQuery) { %>
  export const use<%~ classNameCase(functionName) %>Query = <
      TData = InfiniteData<
       RequestFnReturn<typeof <%= apiInstanceName %>.<%~ functionName %>>,
       Parameter<typeof <%= apiInstanceName %>.<%~ functionName %>>
  >,
  >(
  <%~ conditionalParamsText %>: QueryHookParams<typeof <%= apiInstanceName %>.<%~ functionName %>,
    <% if (isAxiosInstance) { %>
    AxiosError<<%~ errorType %>>
    <% } else { %>
    <%~ errorType %>
    <% } %>
  , TData>,
) => {
  const <%~ hookKeyName %> = <%~ queryKeyName %>.<%~ methodKey %>(<%~ `${conditionalParamsText}.variables` %>);
  return useQuery({
    <%~ hookKeyName %>,
    queryFn: () => <%= apiInstanceName %>.<%~ functionName %>(<%~ `${conditionalParamsText}.variables` %>),
    ...params?.options,
  });
};
<% } else { %>
  export const use<%~ classNameCase(functionName) %>Mutation = (
  <%~ conditionalParamsText %>: MutationHookParams<typeof <%= apiInstanceName %>.<%~ functionName %>,
    <% if (isAxiosInstance) { %>
    AxiosError<<%~ errorType %>>
    <% } else { %>
    <%~ errorType %>
    <% } %>
  >,
) => {
  const <%~ hookKeyName %> = <%~ queryKeyName %>.<%~ methodKey %>();
  return useMutation({
    <%~ hookKeyName %>,
    mutationFn: <%= apiInstanceName %>.<%~ functionName %>,
    ...params?.options,
  });
};
<% } %>


<% if (isQuery && hasPagination) { %>

 /**
 <%~ routeDocs.description %>

 * <% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>

 */
export const use<%~ classNameCase(functionName) %>InfiniteQuery = <
  TData = RequestFnReturn<typeof <%= apiInstanceName %>.<%~ functionName %>>,
>(
  <%~ conditionalParamsText %>: InfiniteQueryHookParams<typeof <%= apiInstanceName %>.<%~ functionName %>,
  <% if (isAxiosInstance) { %>
  AxiosError<<%~ errorType %>>
    <% } else { %>
  <%~ errorType %>
  <% } %>
, TData>,
) => {
  const <%~ hookKeyName %> =  <%~ queryKeyName %>.<%~ methodKey %>_INFINITE(<%~ conditionalQueryKeyParams %>);

  return useInfiniteQuery({
    <%~ hookKeyName %>,
    initialPageParam:  <% if (initialPageParam()) { %>
      <%~ initialPageParam() %> 
      <% } else { %>
         null
      <% } %>,
    queryFn: <% if (getNextPage()) { %>
      <%~ getNextPage() %> 
      <% } else { %>
        ({ pageParam }) => {
          return <%= apiInstanceName %>.<%~ functionName %>({
            ...params?.variables,
            query: { ...params?.variables?.query, <%~ pagination.nextKey %>: pageParam, }
          });
        }
      <% } %>,
      getNextPageParam: 
      <% if (getNextPageParam()) { %>
        <%~ getNextPageParam() %> 
        <% } else { %>
          (lastPage) => {
            const <%~ pagination.nextKey %> = lastPage.cursor ?? null;
            return <%~ pagination.nextKey %>;
          }
        <% } %>,
      ...params?.options,
  });
};

<% } %>